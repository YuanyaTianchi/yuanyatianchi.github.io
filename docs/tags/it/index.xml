<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>it on 鸢雅</title>
    <link>https://yuanyatianchi.github.io/tags/it/</link>
    <description>Recent content in it on 鸢雅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yuanyatianchi.github.io/tags/it/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo</title>
      <link>https://yuanyatianchi.github.io/post/it.blog.hugo/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.blog.hugo/</guid>
      <description>hugo git、go环境 下载解压并配置环境变量：https://github.com/gohugoio/hugo/releases/download/v0.78.0/hugo_0.78.0_Windows-</description>
    </item>
    
    <item>
      <title>Algorithm</title>
      <link>https://yuanyatianchi.github.io/post/it.algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.algorithm/</guid>
      <description>算法 DP dp：dp 问题的一般形式就是求最值，求解dp的核心问题是穷举。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值。 重叠子问题：动态规划的穷举有点特别，因为这类问题存在「重叠子问题」，</description>
    </item>
    
    <item>
      <title>CodeRebuild</title>
      <link>https://yuanyatianchi.github.io/post/it.coderebuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.coderebuild/</guid>
      <description>重构笔记 一个例子 // 影片类型 type MovieType int var ( CHILD_RENTS MovieType = 2 // 儿童租用的 REGULAR MovieType = 0 // 普通的 NEW_RELEASE MovieType = 1 // 新发布的 ) // 影片 type Movie struct { Title string PriceCode MovieType } // 租借记录 type Rental struct { Movie *Movie DaysRented int // 租借天数 } // 顾客 type Customer struct { Name string Rentals []*Rental } // 添加租借记录 func (cus *Customer) AddRental(rental</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://yuanyatianchi.github.io/post/it.cloudnative.docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.cloudnative.docker/</guid>
      <description>Docker 官网：https://www.docker.com/ 仓库：https://hub.docker.com/ hello $ uname -r #查看centOS系统内核版本，Docker要求内核版本高于3.10 $ yum update #升级软件包</description>
    </item>
    
    <item>
      <title>etcd</title>
      <link>https://yuanyatianchi.github.io/post/it.db.etcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.db.etcd/</guid>
      <description>etcd clients Golang https://github.com/etcd-io/etcd/tree/master/clientv3 go get go.etcd.io/etcd/clientv3 #解决包导入版本问题：https://segmentfault.com/q/1010000021762281/ client中有KV、Lease、Watcher等对象，通过这些对象来操作k</description>
    </item>
    
    <item>
      <title>git</title>
      <link>https://yuanyatianchi.github.io/post/it.versioncontrol.git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.versioncontrol.git/</guid>
      <description>git 192.30.253.113 github.com：修改host，提高GitHub的push和pull速度 命令行符号 ：可写可不写 &amp;lt;&amp;gt;：必须写且需要用你自己的内容替换 { }：必须在其中做出选择(选项之间以 | 隔开) 结构 工</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://yuanyatianchi.github.io/post/it.mq.kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.mq.kafka/</guid>
      <description>Kafka http://kafka.apache.org/ client go 链接kafka使用第三方库 https://github.com/Shopify/sarama ，sarama v1.20之后的版本加入了zstd压缩算法，编译需要用到cgo，win上需要下载 http://mingw-w64.org/doku.php/download ，当然也可以使用v1.20之前的版本 got get -u github.com/Shopify/sarama /*kafka地址列表*</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://yuanyatianchi.github.io/post/it.cloudnative.kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.cloudnative.kubernetes/</guid>
      <description>Kubernetes 架构设计与实现原理 Kubernetes 为软件工程师提供了强大的容器编排能力，模糊了开发和运维之间的边界，让我们开发、管理和维护一个大型的分布式系统和项目变得更加容易 介绍 Kubernetes 被定义成一个用于自动化部署、扩容和管理容器应用</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://yuanyatianchi.github.io/post/it.sys.linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.sys.linux/</guid>
      <description>linux Linux Linus Benedict Torvalds（Linux之父）编写的开源操作系统的内核 广义上的基于 Linux内核 的 Linux操作系统 内核版本：https://www.kernel.org/ 内核版本分为三个部分：主版本号、</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://yuanyatianchi.github.io/post/it.db.mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.db.mongodb/</guid>
      <description>MongoDB 文档数据库(schema free)，基于二进制JSON存储文档（BSON）。无需定义类型，field:value形式 高性能、高可用、直接加机器即可以解决扩展性问题 支持丰富的CRUD操作，例如:聚合统</description>
    </item>
    
    <item>
      <title>MQ</title>
      <link>https://yuanyatianchi.github.io/post/it.mq.mq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.mq.mq/</guid>
      <description>消息队列 MQ解决的问题：解决了上下游工序之间的“通信”问题；解决了上下游生产速度不一致的问题，起到了“通信”过程中“缓存”的作用 哪些问题适合使用消息队列解决：异步处理、流量控制、服务解耦 秒杀系统与MQ</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://yuanyatianchi.github.io/post/it.db.mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.db.mysql/</guid>
      <description>mysql https://www.mysql.com/ ，https://www.mysql.com/cn/ 3306 sql DDL，数据定义语言。定义和管理数据对象，如数据库，数据表等。CREATE、DROP、ALTER DML，数据操作语言。用于操作数据库对象中所</description>
    </item>
    
    <item>
      <title>RabbitMQ</title>
      <link>https://yuanyatianchi.github.io/post/it.mq.rabbitmq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.mq.rabbitmq/</guid>
      <description>RabbitMQ https://www.rabbitmq.com/ client go go get -u github.com/streadway/amqp package rabbitmq const URL = &amp;quot;amqp://guest:guest@127.0.0.1:5672/&amp;quot; //格式：amqp://账号:密码@地址:端口/虚拟主机 type RabbitMQ struct { url string //连接信息 conn *amqp.Connection //连接 channel *amqp.Channel //通道 queueName string //queue名 exchangeName string //exchange名 routingKey string //routing key } /*Rabb</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://yuanyatianchi.github.io/post/it.db.redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.db.redis/</guid>
      <description>redis https://redis.io/，http://www.redis.cn/ Redis的特性 速度快 数据存在内存（主要原因） c语言编写（50000line，单机的核心代码只有23000line） 单线程</description>
    </item>
    
    <item>
      <title>WinEnv</title>
      <link>https://yuanyatianchi.github.io/post/it.base.winenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.winenv/</guid>
      <description>Windows环境 database mysql https://dev.mysql.com/downloads/ 下载并解压：https://dev.mysql.com/downloads/mysql/ ，c++ 2019可再发行软件包(运行库)：https://aka.ms/vs/16/re</description>
    </item>
    
    <item>
      <title>YuanyaDocker</title>
      <link>https://yuanyatianchi.github.io/post/it.go.project.yuanyadocker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.project.yuanyadocker/</guid>
      <description>MyDocker Docker 是一个使用了 Linux Namespace Cgroups 的虚拟化工具。 Linux Namespace Linux Namespace 是 Kernel 的一个功能，它可以隔离一系列的系统资源，比如 PIO ( Process ID ）、User ID、Network 等。可能会想到 chroot 命令，就像 chroot 允许把当前目录变成根目录一样（被隔离开来</description>
    </item>
    
    <item>
      <title>网络编程</title>
      <link>https://yuanyatianchi.github.io/post/it.base.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
      <description>网络编程</description>
    </item>
    
    <item>
      <title>面试大纲</title>
      <link>https://yuanyatianchi.github.io/post/it.base.%E9%9D%A2%E8%AF%95%E5%A4%A7%E7%BA%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.%E9%9D%A2%E8%AF%95%E5%A4%A7%E7%BA%B2/</guid>
      <description>面试大纲 算法 ascii：A-65、a-97 dp：base case、状态、选择、dp定义 dfs：backtrack(路径, 选择列表)、结束条件-决策树底层 bfs：要扩散的节点、已扩散的节点 math：平方</description>
    </item>
    
  </channel>
</rss>