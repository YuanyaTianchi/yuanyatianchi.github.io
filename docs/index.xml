<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>鸢雅</title>
    <link>https://yuanyatianchi.github.io/</link>
    <description>Recent content on 鸢雅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yuanyatianchi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo</title>
      <link>https://yuanyatianchi.github.io/post/it.blog.hugo/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.blog.hugo/</guid>
      <description>hugo git、go环境 下载 &amp;amp; 解压 &amp;amp; 配置环境变量：https://github.com/gohugoio/hugo #创建项目 hugo new site yuanyatianchi.github.io #主题下载 cd yuanyatianchi.github.io git clone https://github.com/dsrkafuu/hugo-theme-fuji.git themes/fuji #下好后将fuji\exampleSite目录下的c</description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://yuanyatianchi.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://yuanyatianchi.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.
Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.</description>
    </item>
    
    <item>
      <title>Algorithm</title>
      <link>https://yuanyatianchi.github.io/post/it.base.algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.algorithm/</guid>
      <description>算法 DP dp：dp 问题的一般形式就是求最值，求解dp的核心问题是穷举。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值。 重叠子问题：动态规划的穷举有点特别，因为这类问题存在「重叠子问题」，</description>
    </item>
    
    <item>
      <title>CodeRebuild</title>
      <link>https://yuanyatianchi.github.io/post/it.base.coderefactoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.coderefactoring/</guid>
      <description>重构笔记 一个例子 // 影片类型 type MovieType int var ( CHILD_RENTS MovieType = 2 // 儿童租用的 REGULAR MovieType = 0 // 普通的 NEW_RELEASE MovieType = 1 // 新发布的 ) // 影片 type Movie struct { Title string PriceCode MovieType } // 租借记录 type Rental struct { Movie *Movie DaysRented int // 租借天数 } // 顾客 type Customer struct { Name string Rentals []*Rental } // 添加租借记录 func (cus *Customer) AddRental(rental</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://yuanyatianchi.github.io/post/it.cloudnative.docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.cloudnative.docker/</guid>
      <description>Docker 官网：https://www.docker.com/ 仓库：https://hub.docker.com/ hello $ uname -r #查看centOS系统内核版本，Docker要求内核版本高于3.10 $ yum update #升级软件包</description>
    </item>
    
    <item>
      <title>etcd</title>
      <link>https://yuanyatianchi.github.io/post/it.db.etcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.db.etcd/</guid>
      <description>etcd clients Golang https://github.com/etcd-io/etcd/tree/master/clientv3 go get go.etcd.io/etcd/clientv3 #解决包导入版本问题：https://segmentfault.com/q/1010000021762281/ client中有KV、Lease、Watcher等对象，通过这些对象来操作k</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://yuanyatianchi.github.io/post/it.versioncontrol.git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.versioncontrol.git/</guid>
      <description>Git 192.30.253.113 github.com：修改host，提高GitHub的push和pull速度 命令行符号 ：可写可不写 &amp;lt;&amp;gt;：必须写且需要用你自己的内容替换 { }：必须在其中做出选择(选项之间以 | 隔开) 结构 工</description>
    </item>
    
    <item>
      <title>go.base</title>
      <link>https://yuanyatianchi.github.io/post/it.go.base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.base/</guid>
      <description>go.base channel 函数调用栈 函数调用过程 https://www.bilibili.com/video/BV1hv411x7we?p=5 ， 虚拟地址空间：栈、堆、（只读）数据段、代码段 代码段：我们按照编程语言的语法定义的函数，会被编译器编译为一堆堆机器指令，写入可执行文件，程序执行时，可执行文件被加载到内存，</description>
    </item>
    
    <item>
      <title>go.book</title>
      <link>https://yuanyatianchi.github.io/post/it.go.books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.books/</guid>
      <description>go.book 网站 官方：https://golang.google.cn/ 标准库：https://studygolang.com/pkgdoc 标准库实例：https://books.studygolang.com</description>
    </item>
    
    <item>
      <title>go.cmd</title>
      <link>https://yuanyatianchi.github.io/post/it.go.cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.cmd/</guid>
      <description>go.cmd https://golang.org/cmd/ Name Synopsis addr2line Addr2line is a minimal simulation of the GNU addr2line tool, just enough to support pprof. api Binary api computes the exported API of a set of Go packages. asm Asm, typically invoked as “go tool asm”, assembles the source file into an object file named for the basename of the argument source file with a .o suffix. buildid Buildid displays or updates the build ID stored in a Go package or binary. cgo Cgo enables the creation of Go packages that call C code. compile Compile, typically invoked as</description>
    </item>
    
    <item>
      <title>go.hello</title>
      <link>https://yuanyatianchi.github.io/post/it.go.hello/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.hello/</guid>
      <description>go.hello 中文官网：https://golang.google.cn/ 中文文档：https://studygolang.com/pkgdoc 环境 linux 安装：https://golang.google.cn/dl/</description>
    </item>
    
    <item>
      <title>go.声明</title>
      <link>https://yuanyatianchi.github.io/post/it.go.%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.%E5%A3%B0%E6%98%8E/</guid>
      <description>声明 本包：package 包命名：自己开发的程序，一般采用域名作为顶级包名，这样就不会重复了，没有域名可以使用github.com/&amp;lt;username&amp;gt;作为顶级路径 main包：go build 同时要满</description>
    </item>
    
    <item>
      <title>go.并发</title>
      <link>https://yuanyatianchi.github.io/post/it.go.%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.%E5%B9%B6%E5%8F%91/</guid>
      <description>并发 并发是一个cpu核心快速分配时间片交替执行多个任务，并行是多个cpu核心分别执行自己的任务。核心数量受限于硬件，这时候就需要程序设计提高并发量，即并发编程 并发模型 https://www.bilibili.com/video/av70488008?p=116 操作系统体系架构：无论语言层面何</description>
    </item>
    
    <item>
      <title>go.文档</title>
      <link>https://yuanyatianchi.github.io/post/it.go.%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.%E6%B3%A8%E9%87%8A/</guid>
      <description>文档注释 go doc go会自动把我们的注释转换为文档 go doc：显示当前文件夹下的文档 go doc Queue：显示指定type的文档 go doc Pop：显示指定方法 godoc go1.13之后官方安装不再包含godoc，通过go get golang.org/x/tools/cmd/godoc 获取</description>
    </item>
    
    <item>
      <title>go.测试</title>
      <link>https://yuanyatianchi.github.io/post/it.go.%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.%E6%B5%8B%E8%AF%95/</guid>
      <description>测试 Debugging Sucks ! Testing Rocks ! /*单元测试文件名必须以 _test.go 为后缀，前缀一般为要测试的文件名*/ func TestMain(m *testing.M) { //TestMain 在测试函数执行前后执行其它内容，类似AOP。TestMain(m *testing.M)为固定写法 fmt.Println(&amp;quot;before m.Run()&amp;quot;) m.Run() //执行的</description>
    </item>
    
    <item>
      <title>go.类型</title>
      <link>https://yuanyatianchi.github.io/post/it.go.%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.%E7%B1%BB%E5%9E%8B/</guid>
      <description>类型 类型 byte：字节，8bit (u)int，(u)int8，(u)int16，(u)int32，(u)int64：整数，int长度默认与操作系统位数一致，加u表示无符号整数 rune：int32的别名</description>
    </item>
    
    <item>
      <title>go.语句</title>
      <link>https://yuanyatianchi.github.io/post/it.go.%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.%E8%AF%AD%E5%8F%A5/</guid>
      <description>语句 控制语句：control statement 条件 if func ifSentence() { content1, err1 := ioutil.ReadFile(&amp;quot;if.txt&amp;quot;) if err1 != nil { fmt.Println(err1) } else { fmt.Printf(&amp;quot;%s\n&amp;quot;, content1) } if content2, err2 := ioutil.ReadFile(&amp;quot;if.txt&amp;quot;); err2 != nil { //if后的变量只在if的块中存活 fmt.Println(err2) } else { fmt.Printf(&amp;quot;%s\n&amp;quot;, content2) } } swich func switchSentence1(a, b int, op string) int { var result int switch op { //switch的每个cas</description>
    </item>
    
    <item>
      <title>go.错误</title>
      <link>https://yuanyatianchi.github.io/post/it.go.%E9%94%99%E8%AF%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.%E9%94%99%E8%AF%AF/</guid>
      <description>错误 error Go 语言通过内置的错误接口提供了非常简单的错误处理机制 /*error的定义*/ type error interface { Error() string } /*error创建*/ func main() { error1 := errors.New(&amp;quot;error1Message&amp;quot;) fmt.Printf(&amp;quot;%T\n&amp;quot;, error1) //*errors.errorString fmt.Println(error1) //error1Message error2 := fmt.Errorf(&amp;quot;%s&amp;quot;, &amp;quot;error2Message&amp;quot;) fmt.Printf(&amp;quot;%T\n&amp;quot;, error2) //*errors.errorString fmt.Println(error2) //error2Message } 错误处理方式 func ErrorHandle() { file, err := os.OpenFile(&amp;quot;./demo.txt&amp;quot;, os.O_RDONLY, os.ModePerm) /*一般采</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://yuanyatianchi.github.io/post/it.mq.kafka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.mq.kafka/</guid>
      <description>Kafka http://kafka.apache.org/ client go 链接kafka使用第三方库 https://github.com/Shopify/sarama ，sarama v1.20之后的版本加入了zstd压缩算法，编译需要用到cgo，win上需要下载 http://mingw-w64.org/doku.php/download ，当然也可以使用v1.20之前的版本 got get -u github.com/Shopify/sarama /*kafka地址列表*</description>
    </item>
    
    <item>
      <title>Kubernetes.base</title>
      <link>https://yuanyatianchi.github.io/post/it.cloudnative.kubernetes.base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.cloudnative.kubernetes.base/</guid>
      <description>Kubernetes.base 文章出自：https://draveness.me/，这里拷贝方便学习 架构设计与实现原理 Kubernetes 为软件工程师提供了强大的容器编排能力，模糊了开发和运维之间的边界，让我们开发、管理和维护一个大型的分布式系统</description>
    </item>
    
    <item>
      <title>Kubernetes.hello</title>
      <link>https://yuanyatianchi.github.io/post/it.cloudnative.kubernetes.hello/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.cloudnative.kubernetes.hello/</guid>
      <description>Kubernetes.hello 集群搭建准备 遵循官方指南：https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubea</description>
    </item>
    
    <item>
      <title>Kubernetes.resources</title>
      <link>https://yuanyatianchi.github.io/post/it.cloudnative.kubernetes.resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.cloudnative.kubernetes.resource/</guid>
      <description>Kubernetes.resources 一些 Kubernetes 的资源 https://gitee.com/yswyn/K8s/tree/master 。大多因为被墙难以获取的。 yaml kube-flannel.yml --- apiVersion: policy/v1beta1 kind: PodSecurityPolicy metadata: name: psp.flannel.unprivileged annotations: seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default seccomp.security.alpha.kubernetes.io/defaultProfileName: docker/default apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default spec: privileged: false volumes: - configMap - secret - emptyDir - hostPath allowedHostPaths: - pathPrefix: &amp;quot;/etc/cni/net.d&amp;quot; - pathPrefix: &amp;quot;/etc/kube-flannel&amp;quot; - pathPrefix: &amp;quot;/run/flannel&amp;quot; readOnlyRootFilesystem: false # Users and groups runAsUser: rule: RunAsAny supplementalGroups: rule: RunAsAny fsGroup: rule: RunAsAny # Privilege Escalation allowPrivilegeEscalation: false defaultAllowPrivilegeEscalation: false # Capabilities allowedCapabilities: [&#39;NET_ADMIN&#39;] defaultAddCapabilities: [] requiredDropCapabilities: [] # Host namespaces hostPID: false hostIPC: false hostNetwork:</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://yuanyatianchi.github.io/post/it.sys.linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.sys.linux/</guid>
      <description>linux Linux Linus Benedict Torvalds（Linux之父）编写的开源操作系统的内核 广义上的基于 Linux内核 的 Linux操作系统 内核版本：https://www.kernel.org/ 内核版本分为三个部分：主版本号、</description>
    </item>
    
    <item>
      <title>Makefile</title>
      <link>https://yuanyatianchi.github.io/post/it.base.makefile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.makefile/</guid>
      <description>Makefile make 是一个自动化构建工具，会在当前目录下寻找 Makefile 或 makefile 文件。如果存在相应的文件，它就会依据其中定义好的规则完成构建任务。 命名为 makefile基本规则 [target] ... : [prerequisites] ... &amp;lt;tab&amp;gt;[command] ... ... targets：规则的目标 prereq</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://yuanyatianchi.github.io/post/it.db.mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.db.mongodb/</guid>
      <description>MongoDB 文档数据库(schema free)，基于二进制JSON存储文档（BSON）。无需定义类型，field:value形式 高性能、高可用、直接加机器即可以解决扩展性问题 支持丰富的CRUD操作，例如:聚合统</description>
    </item>
    
    <item>
      <title>MQ</title>
      <link>https://yuanyatianchi.github.io/post/it.mq.mq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.mq.mq/</guid>
      <description>消息队列 MQ解决的问题：解决了上下游工序之间的“通信”问题；解决了上下游生产速度不一致的问题，起到了“通信”过程中“缓存”的作用 哪些问题适合使用消息队列解决：异步处理、流量控制、服务解耦 秒杀系统与MQ</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://yuanyatianchi.github.io/post/it.db.mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.db.mysql/</guid>
      <description>mysql https://www.mysql.com/ ，https://www.mysql.com/cn/ 3306 sql DDL，数据定义语言。定义和管理数据对象，如数据库，数据表等。CREATE、DROP、ALTER DML，数据操作语言。用于操作数据库对象中所</description>
    </item>
    
    <item>
      <title>RabbitMQ</title>
      <link>https://yuanyatianchi.github.io/post/it.mq.rabbitmq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.mq.rabbitmq/</guid>
      <description>RabbitMQ https://www.rabbitmq.com/ client go go get -u github.com/streadway/amqp package rabbitmq const URL = &amp;quot;amqp://guest:guest@127.0.0.1:5672/&amp;quot; //格式：amqp://账号:密码@地址:端口/虚拟主机 type RabbitMQ struct { url string //连接信息 conn *amqp.Connection //连接 channel *amqp.Channel //通道 queueName string //queue名 exchangeName string //exchange名 routingKey string //routing key } /*Rabb</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://yuanyatianchi.github.io/post/it.db.redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.db.redis/</guid>
      <description>redis https://redis.io/，http://www.redis.cn/ Redis的特性 速度快 数据存在内存（主要原因） c语言编写（50000line，单机的核心代码只有23000line） 单线程</description>
    </item>
    
    <item>
      <title>Typora</title>
      <link>https://yuanyatianchi.github.io/post/tool.typora/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/tool.typora/</guid>
      <description>所有操作都只在 行首 起效，所有操作的 空格 不可缺省。 基本 标题 &amp;lsquo;### 标题内容&amp;rsquo;：有几个 &amp;lsquo;#&amp;rsquo; 即是几级标题，同时也是几号字体。 有序列表 &amp;lsquo;1. &#39; 无序列表 &amp;lsquo;- &#39; 或 &amp;lsquo;+ &#39; 插入 代码块 &amp;lsquo;```语言名&amp;rsquo</description>
    </item>
    
    <item>
      <title>UML</title>
      <link>https://yuanyatianchi.github.io/post/tool.uml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/tool.uml/</guid>
      <description>UML 时序图 什么是时序图 时序图(Sequence Diagram)，又名序列图、循序图，是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。 使用场景 时序图的使用场景非常广泛，</description>
    </item>
    
    <item>
      <title>WinEnv</title>
      <link>https://yuanyatianchi.github.io/post/it.base.winenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.winenv/</guid>
      <description>Windows环境 database mysql https://dev.mysql.com/downloads/ 下载并解压：https://dev.mysql.com/downloads/mysql/ ，c++ 2019可再发行软件包(运行库)：https://aka.ms/vs/16/re</description>
    </item>
    
    <item>
      <title>YuanyaCrontab</title>
      <link>https://yuanyatianchi.github.io/post/it.go.project.yuanyacrontab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.project.yuanyacrontab/</guid>
      <description>Golang分布式任务调度 传统方案-linux下的crontab 配置任务时,需要ssh登录脚本服务器进行操作 服务器宕机，任务将终止调度，需要人工迁移 排查问题低效，无法方便的查看任务状态与错误输出 分布式</description>
    </item>
    
    <item>
      <title>YuanyaDocker</title>
      <link>https://yuanyatianchi.github.io/post/it.go.project.yuanyadocker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.project.yuanyadocker/</guid>
      <description>MyDocker Docker 是一个使用了 Linux Namespace Cgroups 的虚拟化工具。 Linux Namespace Linux Namespace 是 Kernel 的一个功能，它可以隔离一系列的系统资源，比如 PIO ( Process ID ）、User ID、Network 等。可能会想到 chroot 命令，就像 chroot 允许把当前目录变成根目录一样（被隔离开来</description>
    </item>
    
    <item>
      <title>YuanyaTools</title>
      <link>https://yuanyatianchi.github.io/post/it.go.project.yuanyatools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.go.project.yuanyatools/</guid>
      <description>YuanyaTools Excel https://github.com/360EntSecGroup-Skylar/excelize 安装 github.com/360EntSecGroup-Skylar/excelize 如果使用Go Modules管理软件包，安装v2 github.com/360EntSecGroup-Skylar/excelize/v2 读 import ( &amp;quot;github.com/360EntSecGroup-Skylar/excelize&amp;quot; ) func readExcel(excelPath string) [][]string { xlsx, err := excelize.OpenFile(excelPath) if err != nil { fmt.Println(&amp;quot;open excel error,&amp;quot;, err.Error()) os.Exit(1) } sheetIndex := xlsx.GetActiveSheetIndex() //获取激活状态下sheetIndex sheetName := xlsx.GetSheetName(sheetIndex) //根据sheetIndex获取shee</description>
    </item>
    
    <item>
      <title>网络编程</title>
      <link>https://yuanyatianchi.github.io/post/it.base.networkprogramming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.networkprogramming/</guid>
      <description>网络编程</description>
    </item>
    
    <item>
      <title>面试大纲</title>
      <link>https://yuanyatianchi.github.io/post/it.base.%E9%9D%A2%E8%AF%95%E5%A4%A7%E7%BA%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuanyatianchi.github.io/post/it.base.%E9%9D%A2%E8%AF%95%E5%A4%A7%E7%BA%B2/</guid>
      <description>面试大纲 算法 ascii：A-65、a-97 dp：base case、状态、选择、dp定义 dfs：backtrack(路径, 选择列表)、结束条件-决策树底层 bfs：要扩散的节点、已扩散的节点 math：平方</description>
    </item>
    
  </channel>
</rss>
